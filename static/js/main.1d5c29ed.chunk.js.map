{"version":3,"sources":["templates.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["templates","src","Main","openImage","index","image","base_image","Image","base64","getBase64Image","setState","prevState","currentImage","modalIsOpen","currentImagebase64","toptext","bottomtext","topY","topX","bottomX","bottomY","toggle","changeText","event","currentTarget","name","value","svgToPng","svg","svgRef","svgWidth","getBoundingClientRect","width","svgHeight","height","canvas","document","createElement","svgData","XMLSerializer","serializeToString","ctx","getContext","img","setAttribute","btoa","unescape","encodeURIComponent","onload","drawImage","a","download","href","toDataURL","body","appendChild","click","state","this","newHeight","textStyle","fontFamily","fontSize","textTransform","fill","stroke","userSelect","className","map","meme","key","style","cursor","alt","onClick","role","Modal","isOpen","ModalHeader","ModalBody","id","ref","el","imageRef","xlinkHref","zIndex","isTopDragging","x","y","dominantBaseline","textAnchor","FormGroup","Label","for","type","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d5c29ed.chunk.js","sourcesContent":[" const templates = [\r\n    { src: '/images/cat.jpg' },\r\n    { src: '/images/confused-guy.jpg' },\r\n    { src: '/images/laugh.jpg' },\r\n    { src: '/images/littleGirl.png' },\r\n    { src: '/images/max.jpg' },\r\n    { src: '/images/Michael.jpg' },\r\n    { src: '/images/RickDalton.jpg '},\r\n    { src: '/images/Toddler.jpg' },\r\n    { src: '/images/trump.jpg' },\r\n    { src: '/images/face.jpg' },\r\n    { src: '/images/pg.jpg' },\r\n    { src: '/images/dc5.png' },\r\n    { src: '/images/kh.jpg' },\r\n    { src: '/images/professional.jpg' },\r\n    { src: '/images/simpsons.jpg' },\r\n    { src: '/images/85.jpg' },\r\n    { src: '/images/images.jpg' }\r\n    \r\n  ];\r\n \r\n\r\n  export default templates;","import React from 'react';\r\nimport { Modal, ModalHeader, ModalBody, FormGroup, Label} from 'reactstrap';\r\nimport  templates  from \"../templates\";\r\n\r\n\r\n\r\n\r\nclass Main extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { \r\n      currentImage: 0,\r\n      modalIsOpen: false,\r\n      currentImagebase64: null,\r\n      toptext: \"\",\r\n      bottomtext: \"\",\r\n      topY: \"10%\",\r\n      topX: \"50%\",\r\n      bottomX: \"50%\",\r\n      bottomY: \"90%\"\r\n    };\r\n  }\r\n\r\n\r\n \r\n  openImage = (index) => {\r\n    const image = templates[index];\r\n    const base_image = new Image();\r\n    base_image.src = image.src;\r\n    const base64 = this.getBase64Image(base_image);\r\n    this.setState(prevState => ({\r\n      currentImage: index,\r\n      modalIsOpen: !prevState.modalIsOpen,\r\n      currentImagebase64: base64,\r\n      toptext: \"\",\r\n      bottomtext: \"\",\r\n      topY: \"10%\",\r\n      topX: \"50%\",\r\n      bottomX: \"50%\",\r\n      bottomY: \"90%\"\r\n    }));\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState(prevState => ({\r\n      modalIsOpen: !prevState.modalIsOpen\r\n    }));\r\n  }\r\n\r\n  changeText = (event) => {\r\n    this.setState({\r\n      [event.currentTarget.name]: event.currentTarget.value\r\n    });\r\n  }\r\n\r\n\r\n   svgToPng = () => {\r\n    const svg = this.svgRef; \r\n    const svgWidth = svg.getBoundingClientRect().width;\r\n    const svgHeight = svg.getBoundingClientRect().height;  \r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = svgWidth;\r\n    canvas.height = svgHeight;\r\n    let svgData = new XMLSerializer().serializeToString(svg);\r\n    const ctx = canvas.getContext('2d');\r\n    const img = new Image();\r\n    img.setAttribute(\"src\", \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svgData))));\r\n    img.onload = () => {\r\n      ctx.drawImage(img,0,0,svg.getBoundingClientRect().width,svg.getBoundingClientRect().height);\r\n      var a = document.createElement('a');\r\n      a.download = 'meme.png';\r\n      a.href = canvas.toDataURL('image/png');\r\n      document.body.appendChild(a);\r\n      a.click();\r\n    }\r\n \r\n  }  \r\n\r\n\r\n  getBase64Image(img) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    canvas.width = img.width;\r\n    canvas.height = img.height;\r\n    var ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(img, 0, 0);\r\n    var dataURL = canvas.toDataURL(\"image/png\");\r\n    return dataURL;\r\n  } \r\n\r\n  render() {\r\n    const image = templates[this.state.currentImage];\r\n    const base_image = new Image();\r\n    base_image.src = image.src;\r\n    var wrh = base_image.width / base_image.height;\r\n    var newWidth = 400;\r\n    var newHeight = newWidth / wrh;\r\n    const textStyle = {\r\n      fontFamily: \"Impact\",\r\n      fontSize: \"50px\",\r\n      textTransform: \"uppercase\",\r\n      fill: \"#FFF\",\r\n      stroke: \"#000\",\r\n      userSelect: \"none\"\r\n    }\r\n\r\n    return (\r\n      \r\n    \r\n       <div>\r\n        <div className=\"container\">\r\n          <div className=\"jumbotron jumbotron-fluid sticky-top\">\r\n            \r\n            <p>\r\n             Stan's Meme Factory\r\n            </p>\r\n        \r\n          </div>\r\n          <div className=\"row\">\r\n            {templates.map((meme,index) => (\r\n              <div className=\"col-md-3\" key={meme.src}>\r\n                <span className=\"topText\">Top text</span>\r\n                <img\r\n                  style={{\r\n                    width: \"100%\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  alt={index}\r\n                  src={meme.src}\r\n                  onClick={() => this.openImage(index)}\r\n                  role=\"presentation\"\r\n                />\r\n              <span className=\"bottomText\">Bottom text</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n {/* modal */}\r\n        \r\n         <Modal  isOpen={this.state.modalIsOpen}>\r\n          <ModalHeader toggle={this.toggle}>Make-a-Meme</ModalHeader>\r\n          <ModalBody>\r\n            \r\n            <svg\r\n              width={newWidth}\r\n              id=\"svg_ref\"\r\n              height={newHeight}\r\n              ref={el => { this.svgRef = el }}\r\n              >\r\n              <image\r\n                ref={el => { this.imageRef = el }}\r\n                xlinkHref={this.state.currentImagebase64}\r\n                height={newHeight}\r\n                width={newWidth}\r\n              />\r\n              <text\r\n                style={{ ...textStyle, zIndex: this.state.isTopDragging ? 4 : 1 }}\r\n                x={this.state.topX}\r\n                y={this.state.topY}\r\n                dominantBaseline=\"middle\"\r\n                textAnchor=\"middle\"\r\n                \r\n              >\r\n                  {this.state.toptext}\r\n              </text>\r\n              <text\r\n                style={textStyle}\r\n                dominantBaseline=\"middle\"\r\n                textAnchor=\"middle\"\r\n                x={this.state.bottomX}\r\n                y={this.state.bottomY}\r\n                 >\r\n                  {this.state.bottomtext}\r\n              </text>\r\n            </svg>\r\n            <div className=\"meme-form\">\r\n              <FormGroup>\r\n                <Label for=\"toptext\">Top Text</Label>\r\n                <input className=\"form-control\" type=\"text\" name=\"toptext\" id=\"toptext\" placeholder=\"Add text to the top\" onChange={this.changeText} />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"bottomtext\">Bottom Text</Label>\r\n                <input className=\"form-control\" type=\"text\" name=\"bottomtext\" id=\"bottomtext\" placeholder=\"Add text to the bottom\" onChange={this.changeText} />\r\n              </FormGroup>\r\n              <button onClick={() => this.svgToPng()} className=\"btn btn-primary\">Download Meme!</button>\r\n            </div>\r\n          </ModalBody>\r\n        </Modal> \r\n      </div> \r\n    )\r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}